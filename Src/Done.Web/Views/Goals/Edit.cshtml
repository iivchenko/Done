@using Done.Web.Models.Goals
@using Done.Domain
@model EditGoalViewModel

@{
    ViewBag.Title = "Edit Goal";
}

<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)

    <div style="display: flex">
        <div class="input-group">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="name-addon">Name</span>
                </div>

                @Html.EditorFor(x => x.Name, new { htmlAttributes = new { @class = "form-control", aria_label = "Username", aria_describedby = "name-addon" } })
            </div>
            @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
        </div>

        <div class="input-group mb-3 ml-3" style="max-width: 200px;">
            <div class="input-group-prepend" style="display: inline">
                <span class="input-group-text" id="state-addon">Status</span>
            </div>
            <select name="State" class="custom-select" aria-describedby="state-addon">
                @foreach (var item in Enum.GetNames(typeof(State)))
                {
                    if (item == Model.State.ToString())
                    {
                        <option value="@item" selected="selected">@item</option>
                    }
                    else
                    {
                        <option value="@item">@item</option>
                    }                    
                }
            </select>
        </div>
    </div>
    <div class="mb-3">
        <textarea name="Description" class="form-control" aria-label="With textarea">@Model.Description</textarea>
    </div>

    <button type="submit" class="btn btn-success float-right">Update</button>
    <br />
    <br />
}

@functions
{
    public string Select(string item, string state)
    {
        return item == state ? "selected=\"selected\"" : string.Empty;
    }
}